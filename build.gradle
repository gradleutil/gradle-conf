buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'groovy-gradle-plugin'
    id 'maven-publish'
    id "com.gradle.plugin-publish" version "0.11.0"
}

version = project.version != 'unspecified' ? project.version : file('VERSION').text.trim()
group = 'net.gradleutil'


repositories {
    jcenter()
    mavenLocal()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation localGroovy()
    implementation gradleApi()

    implementation 'net.gradleutil:conf:1.0.7'

    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
}

javadoc {
    failOnError = false
}

java {
    withJavadocJar()
    withSourcesJar()
}

gradlePlugin {
    plugins {
        gradleconf {
            id = 'net.gradleutil.conf'
            implementationClass = 'net.gradleutil.config.ConfPlugin'
        }
    }
}


pluginBundle {
    website = 'https://github.com/gradleutil/gradle-conf'
    vcsUrl = 'https://github.com/gradleutil/gradle-conf'
    description = 'Configure your Gradle builds with HOCON'
    tags = ['build-tool','configuration','json','json-schema','lightbend-conf','typesafe-conf']

    plugins {
        gradleconf {
            id = 'net.gradleutil.conf'
            displayName = 'Configure projects with HOCON'
        }
    }
}

sourceSets {
    testPlugin {
    }
}

gradlePlugin.testSourceSets(sourceSets.testPlugin)
configurations.testPluginImplementation.extendsFrom(configurations.testImplementation)

task testPlugin(type: Test, group:'tests') {
    testClassesDirs = sourceSets.testPlugin.output.classesDirs
    classpath = sourceSets.testPlugin.runtimeClasspath
}

tasks.withType(Test){
    // Show test results.
    group = 'tests'
    testLogging { events "passed", "skipped", "failed" }
    testLogging.showStandardStreams = false
}

check {
    group = 'tests'
    dependsOn(tasks.testPlugin)
}

task artifactList {
    group = "Help"
    description = "Displays the artifacts associated with each configuration of " + project
    doFirst {
        configurations.findAll().each { config ->
            println "${config}:"
            config.allArtifacts.getFiles().each { file -> println " " + file }
            config.dependencies.each{ dep -> println " dep:" + dep.toString()}
            println ' '
        }
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

tasks.withType(AbstractPublishToMaven) { publishTask ->
    def printInfo = { AbstractPublishToMaven task, String repoPath ->
        task.publication.with { p ->
            def sb = new StringBuilder()
            p.artifacts.each {
                String artifactPath = p.groupId.replace(".", "/") + "/" + p.artifactId + "/" + p.version
                sb.append('\n  ' + repoPath).append(artifactPath)
                        .append(it.classifier ? '-' + it.classifier : '').append('.' + it.extension)
            }
            logger.lifecycle("Published ${p.groupId}:${p.artifactId}:${p.version}${sb.toString()}")
        }
    }
    doLast {
        if (publishTask instanceof PublishToMavenRepository) {
            printInfo(publishTask, publishTask.repository.url.toString())
        } else {
            String repoPath = repositories.mavenLocal().url.toURL().getFile()
            printInfo(publishTask, repoPath)
        }
    }
}