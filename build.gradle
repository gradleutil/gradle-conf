buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'maven-publish'
    id "com.gradle.plugin-publish" version "0.11.0"
}

version = file('VERSION').text
group = 'gradleutil'

repositories {
    jcenter()
    mavenLocal()
    maven { url "https://jitpack.io" }
}

dependencies {
    shadow localGroovy()
    shadow gradleApi()

    implementation 'com.github.gradleutil:conf:1.0.2'

    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
}

configurations.testImplementation.extendsFrom configurations.shadow

jar {
    archiveClassifier.set('core')
}

javadoc {
    failOnError = false
}

shadowJar {
    archiveClassifier.set( null )
    mergeServiceFiles()
    doLast{
        logger.lifecycle( "Shadow jar:" + outputs.files.first() )
    }
}
artifacts.add('implementation', shadowJar)


gradlePlugin {
    plugins {
        gradleconf {
            id = 'gradle-conf'
            implementationClass = 'gradleutil.conf.GradleConfPlugin'
        }
        gradlesettingsconf {
            id = 'gradle-settings-conf'
            implementationClass = 'gradleutil.conf.GradleConfSettingsPlugin'
        }
    }
}

sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

task functionalTest(type: Test, group:'tests') {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

tasks.withType(Test){
    // Show test results.
    group = 'tests'
    testLogging { events "passed", "skipped", "failed" }
    testLogging.showStandardStreams = true
}

check {
    group = 'tests'
    dependsOn(tasks.functionalTest)
}

task artifactList {
    group = "Help"
    description = "Displays the artifacts associated with each configuration of " + project
    doFirst {
        configurations.findAll().each { config ->
            println "${config}:"
            config.allArtifacts.getFiles().each { file -> println " " + file }
            config.dependencies.each{ dep -> println " dep:" + dep.toString()}
            println ' '
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}


// ======== deploy artifacts ========
// Allows forks of the plugin to define their own deployment mechanisms
// in separate files named according to their maven group name
apply from: "deploy/${group}.gradle"
